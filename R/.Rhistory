?solve
install.packages('/Users/rexcheung/Dropbox/CRAN project/HW1/mc_1.0.1.tar.gz')
p = matrix(0, nrow = 4, ncol = 4)
p[1,2] = 0.4; p[1,4] = 0.6;
p[2,1] = 0.3; p[2,3] = 0.7
p[3,2] = 0.8; p[3,4] = 0.2;
p[4,4] = 1
library(mc)
stationary(p, type = 'discrete')
expecthit(p, type = 'discrete', rows = 1:4, columns = 1:4)
expecthit(p, type = 'discrete', rows = 1:4, columns = 4)
p = matrix(0, nrow = 5, ncol = 5)
p[1,1] = 1;
p[2,1] = p[2,3] = 1/2;
p[3,2] = p[3,4] = 1/2;
p[4,3] = p[4,5] = 1/2;
p[5,5] = 1
stationary(p, type = 'discrete')
p = matrix(0, nrow = 4, ncol = 4)
p[1,2] = 0.4; p[1,4] = 0.6;
p[2,1] = 0.3; p[2,3] = 0.7
p[3,2] = 0.8; p[3,4] = 0.2;
p[4,4] = 1
stationary(p, type = 'discrete')
p = matrix(0, nrow = 5, ncol = 5)
p[1,1] = 1;
p[2,1] = p[2,3] = 1/2;
p[3,2] = p[3,4] = 1/2;
p[4,3] = p[4,5] = 1/2;
p[5,5] = 1
p
stationary(p, type = 'discrete')
expecthit(p, type = 'discrete', rows = 3, columns = 1)
expecthit(p, type = 'discrete', rows = 1:4, columns = 1:4)
expecthit(p, type = 'discrete', rows = 1:4, columns = 4)
p = matrix(0, nrow = 4, ncol = 4)
p[1,2] = 0.4; p[1,4] = 0.6;
p[2,1] = 0.3; p[2,3] = 0.7
p[3,2] = 0.8; p[3,4] = 0.2;
p[4,4] = 1
stationary(p, type = 'discrete')
expecthit(p, type = 'discrete', rows = 1:4, columns = 1:4)
expecthit(p, type = 'discrete', rows = 1:4, columns = 4)
?statioanry
?stationary
p = matrix(0, nrow = 4, ncol = 4)
p[1,2] = 0.4; p[1,4] = 0.6;
p[2,1] = 0.3; p[2,3] = 0.7
p[3,2] = 0.8; p[3,4] = 0.2;
p[4,4] = 1
p
p = matrix(0, nrow = 4, ncol = 4)
p[1,2] = 0.4; p[1,4] = 0.6;
p[2,2] = 1
p
p[3,2] = 0.8; p[3,4] = 0.2;
p
p[4,1] = 0.6; p[4,3] = 0.4
p
stationary(p, type = 'discrete')
expecthit(p, type = 'discrete', rows = 1:4, columns = 1:4)
expecthit(p, type = 'discrete', rows = 1:4, columns = 2)
expecthit(p, type = 'discrete', rows = 1:4, columns = 3)
heatmap(matrix(runif(10), nrow = 2))
heatmap(matrix(runif(10), nrow = 2), Rowv = 1:5)
heatmap(matrix(runif(10), nrow = 2), Rowv = 1:2)
heatmap(matrix(runif(10), nrow = 2), Rowv = 1:2)
heatmap(matrix(runif(10), nrow = 2), Rowv = 1:2)
heatmap(matrix(runif(10), nrow = 2), Rowv = 1:5)
x =
matrix(runif(10), nrow = 2)
x
plot(x)
plot(im(x))
library(spatstat)
install.packages('spatstat')
library(spatstat)
plot(im(x))
x
axis(side = 1, labels = 1:5)
axis(side = 1, labels = 1:5, at = 1:5)
axis(side = 2, labels = 1:2, at = 1:2)
x
?im
plot(im(x, yrow = 2:1))
plot(im(x, yrow = 1:2))
heatmap( x, Rowv=NA, Colv=NA, col = heat.colors(256),  margins=c(5,10))
?heatmap
library(gplots)
heatmap.2(x)
heatmap.2(x, cellnote = x)
heatmap.2(x, cellnote = x, Rowv = NA, Colv = NA)
heatmap.2(x, cellnote = x, Rowv = NA)
heatmap.2(x, cellnote = x, Rowv = FALSE, dendrogram = 'none')
heatmap.2(x, cellnote = x, Rowv = FALSE, dendrogram = 'none', trace = 'none')
heatmap.2(x, cellnote = x, Rowv = FALSE, dendrogram = 'none', trace = 'none')
heatmap.2(x, cellnote = x, Rowv = TRUE, dendrogram = 'none', trace = 'none')
heatmap.2(x, cellnote = x, Rowv = TRUE, dendrogram = 'none', trace = 'none')
heatmap.2(x, Rowv = TRUE, dendrogram = 'none', trace = 'none')
heatmap.2(x, Rowv = TRUE, dendrogram = 'none', trace = 'none')
heatmap.2(x, dendrogram = 'none',Rowv = TRUEm trace = 'none')
heatmap.2(x, dendrogram = 'none',Rowv = TRUE,trace = 'none')
heatmap.2(x, dendrogram = 'none',Rowv = 1:2,trace = 'none')
heatmap.2(x, dendrogram = 'none',Rowv = 1:2,trace = 'none')
heatmap.2(x, dendrogram = 'none',Rowv = 1:2,Colv = 1:5, trace = 'none')
heatmap.2(x, dendrogram = 'none',Rowv = 1:2,Colv = 1:5, trace = 'none')
library(lattice)
rownames(x) = 1:2
colnames(x) = 1:5
heatmap(x)
heatmap(x)
heatmap.2(x)
x
print(levelplot(x,
col.regions=heat.colors,
xlab = "year",
ylab = "month",
main = "Air Passengers #1"))
print(levelplot(x,
col.regions=heat.colors,
xlab = "year",
ylab = "month",
main = "Air Passengers #1"))
?levelplot
print(levelplot(t(x),
col.regions=heat.colors,
xlab = "year",
ylab = "month",
main = "Air Passengers #1"))
levelplot(x[1:ncol(x),ncol(x):1])
levelplot(x[1:row(x),ncol(x):1])
ncol(x)
x[1:row(x),ncol(x):1]
nrow(x)
ncol(x):1
nrow(x)
x
1:nrow(x)
1:row(x)
levelplot(x[1:nrow(x),ncol(x):1])
levelplot(x[1:nrow(x),ncol(x):1], col.regions = heat.colors)
levelplot(t(x[1:nrow(x),ncol(x):1]), col.regions = heat.colors)
levelplot(x[nrow(x):1,1:ncol(x)], col.regions = heat.colors)
levelplot(t(x[nrow(x):1,1:ncol(x)]), col.regions = heat.colors)
x
levelplot(t(x[nrow(x):1,1:ncol(x)]), col.regions = heat.colors, ylab = 'Initials States', xlab = 'Destination States')
image(t(x[nrow(x):1,1:ncol(x)]))
image(t(x[nrow(x):1,1:ncol(x)]), col=new.palette(20),xaxt="n",yaxt="n")
new.palette=colorRampPalette(c("black","red","yellow","white"),space="rgb")
image(t(x[nrow(x):1,1:ncol(x)]), col=new.palette(20),xaxt="n",yaxt="n")
new.palette
axis(1,at=1:5,labels=1:5) #draw in tick marks
axis(1,at=seq(0,1,length=5),labels=1:5) #draw in tick marks
axis(2,at=seq(0,1,length=2),labels=1:2)
axis(2,at=seq(0,1,length=2),labels=2:1)
new.palette=colorRampPalette(c("black","red","yellow","white"),space="rgb")
image(t(x[nrow(x):1,1:ncol(x)]), col=new.palette(20),xaxt="n",yaxt="n")
axis(1,at=seq(0,1,length=5),labels=1:5) #draw in tick marks
axis(2,at=seq(0,1,length=2),labels=2:1)
s=seq(min(x),max(x),length=20) #20 values between minimum and maximum values of m
l=matrix(s,ncol=length(s),byrow=TRUE) #coerce it into a horizontal matrix
image(y=s,z=l,col=new.palette(20),ylim=c(min(m),max(m)),xaxt="n",las=1) #plot a one-column heat map
image(y=s,z=l,col=new.palette(20),ylim=c(min(x),max(x)),xaxt="n",las=1) #plot a one-column heat map
new.palette=colorRampPalette(c("black","red","yellow","white"),space="rgb")
image(t(x[nrow(x):1,1:ncol(x)]), col=new.palette(20),xaxt="n",yaxt="n")
axis(1,at=seq(0,1,length=5),labels=1:5) #draw in tick marks
axis(2,at=seq(0,1,length=2),labels=2:1)
s=seq(min(x),max(x),length=20) #20 values between minimum and maximum values of m
l=matrix(s,ncol=length(s),byrow=TRUE) #coerce it into a horizontal matrix
image(y=s,z=l,col=new.palette(20),ylim=c(min(x),max(x)),xaxt="n",las=1) #plot a one-column heat map
levelplot(t(x[nrow(x):1,1:ncol(x)]), col.regions = heat.colors, ylab = 'Initials States', xlab = 'Destination States')
levelplot(t(x[nrow(x):1,1:ncol(x)]), col.regions = heat.colors, ylab = 'Initials States', xlab = 'Destination States', axat = 'n')
levelplot(t(x[nrow(x):1,1:ncol(x)]), col.regions = heat.colors, ylab = 'Initials States', xlab = 'Destination States')
new.palette=colorRampPalette(c("black","red","yellow","white"),space="rgb")
image(t(x[nrow(x):1,1:ncol(x)]), col=new.palette(20),xaxt="n",yaxt="n")
axis(1,at=seq(0,1,length=5),labels=1:5) #draw in tick marks
axis(2,at=seq(0,1,length=2),labels=2:1)
levelplot
s=seq(min(x),max(x),length=20) #20 values between minimum and maximum values of m
l=matrix(s,ncol=length(s),byrow=TRUE) #coerce it into a horizontal matrix
image(y=s,z=l,col=new.palette(20),ylim=c(min(x),max(x)),xaxt="n",las=1) #plot a one-column heat map
par(mar=c(2,3,2,1)) #set the margins of the figures to be smaller than default
layout(matrix(c(1,2),1,2,byrow=TRUE),widths=c(7,1))
new.palette=colorRampPalette(c("black","red","yellow","white"),space="rgb")
image(t(x[nrow(x):1,1:ncol(x)]), col=new.palette(20),xaxt="n",yaxt="n")
axis(1,at=seq(0,1,length=5),labels=1:5) #draw in tick marks
axis(2,at=seq(0,1,length=2),labels=2:1)
s=seq(min(x),max(x),length=20) #20 values between minimum and maximum values of m
l=matrix(s,ncol=length(s),byrow=TRUE) #coerce it into a horizontal matrix
image(y=s,z=l,col=new.palette(20),ylim=c(min(x),max(x)),xaxt="n",las=1) #plot a one-column heat map
image(t(x[nrow(x):1,1:ncol(x)]), col=heat.colors,xaxt="n",yaxt="n")
?image
image(t(x[nrow(x):1,1:ncol(x)]), col='heat.colors',xaxt="n",yaxt="n")
image(t(x[nrow(x):1,1:ncol(x)]), col=heat.colors(20),xaxt="n",yaxt="n")
image(t(x[nrow(x):1,1:ncol(x)]), col=terrain.colors(100),xaxt="n",yaxt="n")
par(mar=c(2,3,2,1)) #set the margins of the figures to be smaller than default
layout(matrix(c(1,2),1,2,byrow=TRUE),widths=c(7,1))
new.palette=colorRampPalette(c("black","red","yellow","white"),space="rgb")
image(t(x[nrow(x):1,1:ncol(x)]), col=terrain.colors(100),xaxt="n",yaxt="n")
axis(1,at=seq(0,1,length=5),labels=1:5) #draw in tick marks
axis(2,at=seq(0,1,length=2),labels=2:1)
image(t(x[nrow(x):1,1:ncol(x)]), col=heat.colors(100),xaxt="n",yaxt="n")
par(mar=c(2,3,2,1)) #set the margins of the figures to be smaller than default
layout(matrix(c(1,2),1,2,byrow=TRUE),widths=c(7,1))
new.palette=colorRampPalette(c("black","red","yellow","white"),space="rgb")
image(t(x[nrow(x):1,1:ncol(x)]), col=heat.colors(100),xaxt="n",yaxt="n")
axis(1,at=seq(0,1,length=5),labels=1:5) #draw in tick marks
axis(2,at=seq(0,1,length=2),labels=2:1)
s=seq(min(x),max(x),length=20) #20 values between minimum and maximum values of m
l=matrix(s,ncol=length(s),byrow=TRUE) #coerce it into a horizontal matrix
image(y=s,z=l,col=new.palette(20),ylim=c(min(x),max(x)),xaxt="n",las=1) #plot a one-column heat map
image(y=s,z=l,col=heat.colors(100),ylim=c(min(x),max(x)),xaxt="n",las=1) #plot a one-column heat map
par(mar=c(2,3,2,1)) #set the margins of the figures to be smaller than default
layout(matrix(c(1,2),1,2,byrow=TRUE),widths=c(7,1))
new.palette=colorRampPalette(c("black","red","yellow","white"),space="rgb")
image(t(x[nrow(x):1,1:ncol(x)]), col=heat.colors(100),xaxt="n",yaxt="n")
axis(1,at=seq(0,1,length=5),labels=1:5) #draw in tick marks
axis(2,at=seq(0,1,length=2),labels=2:1)
s=seq(min(x),max(x),length=20) #20 values between minimum and maximum values of m
l=matrix(s,ncol=length(s),byrow=TRUE) #coerce it into a horizontal matrix
image(y=s,z=l,col=heat.colors(100),ylim=c(min(x),max(x)),xaxt="n",las=1) #plot a one-column heat map
image(t(x[nrow(x):1,1:ncol(x)]), col=heat.colors(100),xaxt="n",yaxt="n", xlab = 'Destinations')
axis(1,at=seq(0,1,length=5),labels=1:5) #draw in tick marks
axis(2,at=seq(0,1,length=2),labels=2:1)
?axis
?title
title(xlab = 'Destinations')
title(ylab = 'DD')
axis(3,at=seq(0,1,length=5),labels=1:5) #draw in tick marks
axis(2,at=seq(0,1,length=2),labels=2:1)
?axis
levelplot(t(x[nrow(x):1,1:ncol(x)]), col.regions = heat.colors, ylab = 'Initials States', xlab = 'Destination States')
source('~/.active-rstudio-document')
p = matrix(0, nrow = 4, ncol = 4)
p[1,2] = 0.6; p[1,4] = 0.4
p[2,1] = 0.3; p[2,3] = 0.7
p[3,2] = 0.5; p[3,4] = 0.5
p[4,1] = 0.2; p[4,3] = 0.8
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE)
source('~/.active-rstudio-document')
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE)
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE)
source('~/.active-rstudio-document')
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE)
source('~/.active-rstudio-document')
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE)
source('~/.active-rstudio-document')
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE)
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = FALSE)
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE)
TRUE
?levelplot
source('~/.active-rstudio-document')
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE)
pijdef = p
rows = 1:3
columns = 3:4
plot.heat = TRUE
rows = sort(unique(rows)); columns = sort(unique(columns))
states.type = class(pijdef)
states.type
mkc = new('markovchain', transitionMatrix = pijdef)
if(!is.irreducible(mkc)) warning('Chain is not irreducible, expected steps is infinite for non-absorbing states')
hit.matrix = hits.fin(pijdef, type, rows, columns)
type = 'discret'
type = 'discrete'
hit.matrix = hits.fin(pijdef, type, rows, columns)
mc = list(pijdef = pijdef, steps = hit.matrix)
mc
class(mc) = 'mc'
if(plot.heat){
hit.matrix = hits.fin(pijdef, type, 1:nrow(pijdef), 1:ncol(pijdef))
print(levelplot(t(hit.matrix[nrow(hit.matrix):1,1:ncol(hit.matrix)]), col.regions = heat.colors, ylab = 'Initials States', xlab = 'Destination States'))
}
source('~/.active-rstudio-document')
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE)
source('~/.active-rstudio-document')
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE)
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = FALSE)
source('~/.active-rstudio-document')
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = FALSE)
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE)
expecthit(p, 'discrete', rows = 1:4, columns = 1:4)
test = function(...){
args= list(...)
exists = is.null(args[['z']])
return(exists)
}
test(z = 4)
test(x = 2)
?hasArg
test = function(...){
#args= list(...)
exists = hasArgs(z))
return(exists)
}
test = function(...){
#args= list(...)
exists = hasArgs(z)
return(exists)
}
test(x = 1, y = 2)
library(methods)
test(x = 1, y = 2)
test = function(...){
#args= list(...)
exists = hasArg(z)
return(exists)
}
test(x = 1, y = 2)
test(x = 1, y = 2, z = 4)
source('~/.active-rstudio-document')
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE)
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE, heat.row = c(1,4))
test = function(x, y, ...){
#args= list(...)
exists = hasArg(z)
return(exists)
}
test(z = 5)
test(4, 6, z = 3)
test(4, z = 3)
test(4, 5)
test(4, 5, 6)
source('~/.active-rstudio-document')
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE, heat.row = c(1,4))
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE, tol = 0.5, heat.row = c(1,4))
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE, heat.col = c(1,4))
heat.row
library(method)
library(methods)
debug(expecthit)
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE, heat.col = c(1,4))
heat.row
heat.row
expecthit(p, 'discrete', rows = 1:3, columns = 3:4, plot.heat = TRUE, heat.col = c(1,4))
heat.col
heat.col
rm(list=ls())
